// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native"]
}

datasource db {
    provider          = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum TruckType {
    Box
    Flatbed
    Refrigerated
    Curtainsider
}

model Truck {
    id        String     @id @default(cuid())
    make      String?
    model     String?
    type      TruckType?
    year      Int
    maxWeight Int
    minWeight Int        @default(0)
    mileage   Int        @default(0)
    inFlight  Boolean    @default(false)

    flights Flight[]

    @@index([type, maxWeight, year, mileage, inFlight])
}

model Driver {
    id        String  @id @default(cuid())
    firstname String?
    lastname  String?
    surname   String?

    flights Flight[]
}

model Flight {
    id String @id @default(cuid())

    sourceAddressName      String
    sourceAddressLatitude  Float
    sourceAddressLongitude Float

    destAddressName      String
    destAddressLatitude  Float
    destAddressLongitude Float

    driverId String?
    driver   Driver? @relation(fields: [driverId], references: [id], onDelete: SetNull, onUpdate: Cascade)

    truckId String?
    truck   Truck?  @relation(fields: [truckId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}
